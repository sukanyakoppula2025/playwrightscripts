name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allows manual trigger

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Display .NET version
      run: |
        dotnet --version
        dotnet --list-sdks
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Install Playwright CLI
      run: dotnet tool install --global Microsoft.Playwright.CLI
      
    - name: Install Playwright browsers
      run: playwright install
      
    - name: Run Playwright tests
      run: dotnet run --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        
    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report
        path: test-report.html
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots
        path: screenshots/
        
    - name: Upload test videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-videos
        path: videos/
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🧪 Playwright Test Results\n\n';
          
          try {
            if (fs.existsSync('test-report.html')) {
              comment += '✅ **HTML Report Generated**\n';
              comment += '📄 Download the report from the Actions artifacts\n\n';
            }
            
            if (fs.existsSync('screenshots/')) {
              const screenshots = fs.readdirSync('screenshots/').filter(f => f.endsWith('.png'));
              comment += `📸 **Screenshots Captured**: ${screenshots.length} files\n\n`;
            }
            
            comment += '🔍 **View Results**: Check the Actions tab for detailed logs and artifacts';
            
          } catch (error) {
            comment += '❌ **Error reading test results**\n';
            comment += 'Check the Actions logs for details';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
