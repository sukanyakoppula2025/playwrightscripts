name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allows manual trigger

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Display .NET version
      run: |
        dotnet --version
        dotnet --list-sdks
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build Bed Bath & Beyond Tests
      run: dotnet build BedBathBeyondTests.csproj --configuration Release --no-restore
        
    - name: Build Gmail Tests
      run: dotnet build GmailTests.csproj --configuration Release --no-restore
        
    - name: Install Playwright CLI
      run: dotnet tool install --global Microsoft.Playwright.CLI
        
    - name: Install Playwright browsers
      run: playwright install
        
    - name: Run Bed Bath & Beyond Login Tests
      run: |
        echo "Running Bed Bath & Beyond Login Tests..."
        dotnet run --project BedBathBeyondTests.csproj --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: chromium
        
    - name: Run Gmail Login Tests
      run: |
        echo "Running Gmail Login Tests..."
        dotnet run --project GmailTests.csproj --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: chromium
        
    - name: Generate HTML Report Demo
      run: |
        echo "Generating HTML Report Demo..."
        dotnet run --project BedBathBeyondTests.csproj --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: chromium
        
    - name: Upload HTML reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-reports
        path: reports/
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots
        path: screenshots/
        
    - name: Upload test videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-videos
        path: videos/
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🧪 Playwright Test Results\n\n';
          
          comment += '### 🛏️ Bed Bath & Beyond Tests\n';
          comment += '- Login automation with enhanced error handling\n';
          comment += '- Furniture navigation automation\n';
          comment += '- Configuration-based test execution\n\n';
          
          comment += '### 📧 Gmail Tests\n';
          comment += '- Gmail login automation\n';
          comment += '- Enhanced login with multiple scenarios\n\n';
          
          comment += '### 🛎️ TripAdvisor Tests\n';
          '- Poole search automation\n';
          '- Cookie consent handling\n\n';
          
          try {
            if (fs.existsSync('reports/')) {
              const reports = fs.readdirSync('reports/').filter(f => f.endsWith('.html'));
              comment += `📄 **HTML Reports Generated**: ${reports.length} files\n`;
              comment += '📁 Download from Actions artifacts\n\n';
            }
            
            if (fs.existsSync('screenshots/')) {
              const screenshots = fs.readdirSync('screenshots/').filter(f => f.endsWith('.png'));
              comment += `📸 **Screenshots Captured**: ${screenshots.length} files\n\n`;
            }
            
            comment += '🔍 **View Results**: Check the Actions tab for detailed logs and artifacts';
            
          } catch (error) {
            comment += '❌ **Error reading test results**\n';
            comment += 'Check the Actions logs for details';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
