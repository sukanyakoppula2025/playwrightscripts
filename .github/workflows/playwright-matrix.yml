name: Playwright Matrix Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test-scenario:
        description: 'Specific test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - bedbath-tests
        - gmail-tests
        - google-search-tests
        - html-reports
      browser:
        description: 'Browser to test with'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit

jobs:
  test-bedbath:
    name: üõèÔ∏è Bed Bath & Beyond Tests
    runs-on: windows-latest
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'bedbath-tests'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Build Bed Bath & Beyond Tests
      run: dotnet build "BedBathBeyondTests.csproj" --configuration Release
        
    - name: Install Playwright
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install
        
    - name: Run Bed Bath & Beyond Tests
      run: |
        echo "Running Bed Bath & Beyond Tests on ${{ matrix.browser }}..."
        dotnet run --project "BedBathBeyondTests.csproj" --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
        
    - name: Upload Bed Bath & Beyond Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bedbath-results-${{ matrix.browser }}
        path: |
          screenshots/
          videos/
          reports/
          
  test-gmail:
    name: üìß Gmail Tests
    runs-on: windows-latest
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'gmail-tests'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Build Gmail Tests
      run: dotnet build "GmailTests.csproj" --configuration Release
        
    - name: Install Playwright
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install
        
    - name: Run Gmail Tests
      run: |
        echo "Running Gmail Tests on ${{ matrix.browser }}..."
        dotnet run --project "GmailTests.csproj" --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
        
    - name: Upload Gmail Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gmail-results-${{ matrix.browser }}
        path: |
          screenshots/
          videos/
          reports/
          
  test-google-search:
    name: üîç Google Search Tests
    runs-on: windows-latest
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'google-search-tests'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Build Google Search Tests
      run: dotnet build "GoogleSearchTests.csproj" --configuration Release
        
    - name: Install Playwright
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install
        
    - name: Run Google Search Tests
      run: |
        echo "Running Google Search Tests on ${{ matrix.browser }}..."
        dotnet run --project "GoogleSearchTests.csproj" --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
        
    - name: Upload Google Search Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: google-search-results-${{ matrix.browser }}
        path: |
          screenshots/
          videos/
          reports/
          
  generate-html-reports:
    name: üìä HTML Report Generation
    runs-on: windows-latest
    if: github.event.inputs.test_scenario == 'all' || github.event.inputs.test_scenario == 'html-reports'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Build Bed Bath & Beyond Tests
      run: dotnet build "BedBathBeyondTests.csproj" --configuration Release
        
    - name: Install Playwright
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install
        
    - name: Generate HTML Report Demo
      run: |
        echo "Generating HTML Report Demo..."
        dotnet run --project "BedBathBeyondTests.csproj" --configuration Release --no-build
      env:
        PLAYWRIGHT_HEADLESS: true
        PLAYWRIGHT_BROWSER: ${{ github.event.inputs.browser || 'chromium' }}
        
    - name: Upload Generated Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-reports-generated
        path: reports/
        
  summary-report:
    name: üìã Test Summary Report
    runs-on: ubuntu-latest
    needs: [test-bedbath, test-gmail, test-google-search, generate-html-reports]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Generate comprehensive summary
      run: |
        echo "## üß™ Playwright Matrix Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üß™ Test Projects Executed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check which test projects were run
        if [ -d "artifacts/bedbath-results-chromium" ] || [ -d "artifacts/bedbath-results-firefox" ] || [ -d "artifacts/bedbath-results-webkit" ]; then
          echo "‚úÖ **Bed Bath & Beyond Tests**: Completed across browsers" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "artifacts/gmail-results-chromium" ] || [ -d "artifacts/gmail-results-firefox" ] || [ -d "artifacts/gmail-results-webkit" ]; then
          echo "‚úÖ **Gmail Tests**: Completed across browsers" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "artifacts/google-search-results-chromium" ] || [ -d "artifacts/google-search-results-firefox" ] || [ -d "artifacts/google-search-results-webkit" ]; then
          echo "‚úÖ **Google Search Tests**: Completed across browsers" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "artifacts/html-reports-generated" ]; then
          echo "‚úÖ **HTML Report Generation**: Completed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Browser Coverage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Chromium**: Chrome-based testing" >> $GITHUB_STEP_SUMMARY
        echo "- **Firefox**: Mozilla Firefox testing" >> $GITHUB_STEP_SUMMARY
        echo "- **WebKit**: Safari-based testing" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ Artifacts Available" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Results**: Screenshots, videos, and logs per browser" >> $GITHUB_STEP_SUMMARY
        echo "- **HTML Reports**: Professional test execution reports" >> $GITHUB_STEP_SUMMARY
        echo "- **Cross-Browser**: Results from Chrome, Firefox, and Safari" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment PR with comprehensive results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## üß™ Playwright Matrix Test Results\n\n';
          
          comment += '### üß™ Test Projects Executed\n\n';
          
          const projects = [
            { name: 'Bed Bath & Beyond Tests', patterns: ['bedbath-results-chromium', 'bedbath-results-firefox', 'bedbath-results-webkit'] },
            { name: 'Gmail Tests', patterns: ['gmail-results-chromium', 'gmail-results-firefox', 'gmail-results-webkit'] },
            { name: 'Google Search Tests', patterns: ['google-search-results-chromium', 'google-search-results-firefox', 'google-search-results-webkit'] },
            { name: 'HTML Report Generation', path: 'html-reports-generated' }
          ];
          
          projects.forEach(project => {
            if (project.patterns) {
              // Check for matrix results
              const hasResults = project.patterns.some(pattern => fs.existsSync(`artifacts/${pattern}`));
              if (hasResults) {
                comment += `‚úÖ **${project.name}**: Completed across browsers\n`;
              } else {
                comment += `‚ùå **${project.name}**: Not executed or failed\n`;
              }
            } else {
              // Check for single path
              if (fs.existsSync(`artifacts/${project.path}`)) {
                comment += `‚úÖ **${project.name}**: Completed successfully\n`;
              } else {
                comment += `‚ùå **${project.name}**: Not executed or failed\n`;
              }
            }
          });
          
          comment += '\n### üåê Browser Coverage\n\n';
          comment += '- **Chromium**: Chrome-based testing\n';
          comment += '- **Firefox**: Mozilla Firefox testing\n';
          comment += '- **WebKit**: Safari-based testing\n\n';
          
          comment += '### üöÄ Key Features\n\n';
          comment += '- **üõèÔ∏è Bed Bath & Beyond**: Login automation, Furniture navigation\n';
          comment += '- **üìß Gmail**: Login automation with enhanced scenarios\n';
          comment += '- **üîç Google Search**: Web search automation\n';
          comment += '- **üìä HTML Reports**: Professional test result generation\n';
          comment += '- **‚öôÔ∏è Configuration**: Environment-specific test settings\n';
          comment += '- **üîÑ Cross-browser**: Support for Chrome, Firefox, Safari\n\n';
          
          comment += '### üìÅ Artifacts Available\n\n';
          comment += '- **Test Results**: Screenshots, videos, and execution logs per browser\n';
          comment += '- **HTML Reports**: Professional test execution reports\n';
          comment += '- **Cross-Browser**: Results from Chrome, Firefox, and Safari\n\n';
          comment += 'üîç **View Results**: Check the Actions tab for detailed logs and artifacts';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
